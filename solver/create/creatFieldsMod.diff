--- createFieldssFoam.H	2018-10-08 15:23:00.000000000 +0530
+++ createFields.H	2024-11-25 11:06:03.366962926 +0530
@@ -1,3 +1,5 @@
+#include "createRDeltaT.H"
+
 Info<< "Reading field p_rgh\n" << endl;
 volScalarField p_rgh
 (
@@ -26,63 +28,66 @@
     mesh
 );
 
-solidificationSystem fluid(U);
+#include "createPhi.H"
+
+Info<< "Reading transportProperties\n" << endl;
+immiscibleIncompressibleTwoPhaseMixture mixture(U, phi);
+
+volScalarField& alpha1(mixture.alpha1());
+volScalarField& alpha2(mixture.alpha2());
+#include "createFaceFractions.H"
+
+const dimensionedScalar& rho1 = mixture.rho1();	//Use a copy instead of reference.
+const dimensionedScalar& rho2 = mixture.rho2();
 
-Info<< "Reading field T\n" << endl;
-volScalarField T
+// Need to store rho for ddt(rho, U)
+volScalarField rho
 (
     IOobject
     (
-        "T",
+        "rho",
         runTime.timeName(),
         mesh,
-        IOobject::MUST_READ,
-        IOobject::AUTO_WRITE
+        IOobject::READ_IF_PRESENT,
+	IOobject::AUTO_WRITE
     ),
-    mesh
+    alpha1*rho1 + alpha2*rho2
 );
+rho.oldTime();
 
-Info<< "Reading field C\n" << endl;
-volScalarField C
+
+volScalarField mu
 (
     IOobject
     (
-        "C",
-        runTime.timeName(),
-        mesh,
-        IOobject::MUST_READ,
-        IOobject::AUTO_WRITE
+        "mu",
+	runTime.timeName(),
+	mesh,
+	IOobject::NO_READ,
+	IOobject::AUTO_WRITE
     ),
-    mesh
+    mixture.mu()
 );
 
-#include "createAuxilaryFields.H"
-
-// Mixure density for shrinkage force
-volScalarField rho
+// Mass flux
+surfaceScalarField rhoPhi
 (
     IOobject
     (
-        "rho",
+        "rhoPhi",
         runTime.timeName(),
-        mesh
+        mesh,
+        IOobject::NO_READ,
+        IOobject::NO_WRITE
     ),
-    fluid.rho()
+    fvc::interpolate(rho)*phi
 );
 
-#include "compressibleCreatePhi.H"
 
-// Kinematic density for buoyancy force
-volScalarField rhok
+// Construct incompressible turbulence model
+autoPtr<incompressible::turbulenceModel> turbulence
 (
-    IOobject
-    (
-        "rhok",
-        runTime.timeName(),
-        mesh
-    ),
-    fluid.rho2()
-   *(1.0 - fluid.betaT()*(T - fluid.TRef()) - fluid.betaC()*(C2 - fluid.CRef()))
+    incompressible::turbulenceModel::New(U, phi, mixture)
 );
 
 
@@ -90,6 +95,7 @@
 #include "readhRef.H"
 #include "gh.H"
 
+//Check p and p_rgh initialization in incompressible vs compressible.
 volScalarField p
 (
     IOobject
@@ -100,7 +106,7 @@
         IOobject::NO_READ,
         IOobject::AUTO_WRITE
     ),
-    p_rgh + rhok*gh
+    p_rgh + rho*gh
 );
 
 label pRefCell = 0;
@@ -122,9 +128,57 @@
         p.dimensions(),
         pRefValue - getRefCellValue(p, pRefCell)
     );
+    p_rgh = p - rho*gh;
 }
 
 mesh.setFluxRequired(p_rgh.name());
+mesh.setFluxRequired(alpha1.name());
+
+volVectorField Um
+(
+    IOobject
+    (
+        "Um",
+        runTime.timeName(),
+        mesh,
+        IOobject::NO_READ,
+        IOobject::NO_WRITE
+    ),
+    U
+);
+
+volScalarField alpham
+(
+    IOobject
+    (
+        "alpham",
+        runTime.timeName(),
+        mesh,
+        IOobject::NO_READ,
+        IOobject::NO_WRITE
+    ),
+    alpha1
+);
 
 #include "createMRF.H"
+
+volScalarField surfaceCell
+(
+    IOobject
+    (
+        "surfaceCell",
+        runTime.timeName(),
+        mesh,
+        IOobject::NO_READ,
+        IOobject::AUTO_WRITE
+    ),
+    mesh,
+    dimensionedScalar("zero", dimless, 0.0)
+);
+
+#include "createCustomDict.H"
+#include "createScalarFields.H"
+#include "createScalarSource.H"
+#include "createIsoAdvection.H"
+
 #include "createFvOptions.H"
